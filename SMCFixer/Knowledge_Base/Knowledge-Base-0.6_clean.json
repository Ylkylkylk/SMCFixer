[
            "The resulting type of an exponentiation is the type of the base. It used to be the smallest type\nthat can hold both the type of the base and the type of the exponent, as with symmetric\noperations. Additionally, signed types are allowed for the base of the exponentiation.",
            "Functions can now only be overridden when they are either marked with the\n<code>virtual</code> keyword or defined in an interface. Functions without\nimplementation outside an interface have to be marked <code>virtual</code>.\nWhen overriding a function or modifier, the new keyword <code>override</code>\nmust be used. When overriding a function or modifier defined in multiple\nparallel bases, all bases must be listed in parentheses after the keyword\nlike so: <code>override(Base1, Base2)</code>.Add virtual to every non-interface function you intend to override.Add <code>virtual</code> to every non-interface function you intend to override. Add <code>virtual</code>to all functions without implementation outside interfaces. For single inheritance, add <code>override</code> to every overriding function. For multiple inheritance, add <code>override(A, B, ..)</code>,where you list all contracts that define the overridden function in the parentheses. When multiple bases define the same function, the inheriting contract must override all conflicting functions.",
            "Member-access to <code>length</code> of arrays is now always read-only, even for storage arrays. It is no\nlonger possible to resize storage arrays by assigning a new value to their length. Use <code>push()</code>,\n<code>push(value)</code> or <code>pop()</code> instead, or assign a full array, which will of course overwrite the existing content.\nThe reason behind this is to prevent storage collisions of gigantic\nstorage arrays.Change <code>uint length = array.push(value)</code> to <code>array.push(value);</code>. The new length can be accessed via <code>array.length</code>. ",
            "The new keyword <code>abstract</code> can be used to mark contracts as abstract. It has to be used\nif a contract does not implement all its functions. Abstract contracts cannot be created using the <code>new</code> operator,\nand it is not possible to generate bytecode for them during compilation.",
            "Libraries have to implement all their functions, not only the internal ones.",
            "The names of variables declared in inline assembly may no longer end in <code>_slot</code> or <code>_offset</code>.Choose unique identifiers for variable declarations in inline assembly that do not conflict with declarations outside the inline assembly block.",
            "Variable declarations in inline assembly may no longer shadow any declaration outside the inline assembly block.\nIf the name contains a dot, its prefix up to the dot may not conflict with any declaration outside the inline\nassembly block.",
            "In inline assembly, opcodes that do not take arguments are now represented as \u201cbuilt-in functions\u201d instead of standalone identifiers. So <code>gas</code> is now <code>gas()</code>.In inline assembly, add <code>()</code> to all opcodes that do not otherwise accept an argument.For example, change <code>pc</code> to <code>pc()</code>, and <code>gas</code> to <code>gas()</code>.",
            "State variable shadowing is now disallowed.  A derived contract can only\ndeclare a state variable <code>x</code>, if there is no visible state variable with\nthe same name in any of its bases.",
            "Conversions from external function types to <code>address</code> are now disallowed. Instead external\nfunction types have a member called <code>address</code>, similar to the existing <code>selector</code> member.Change <code>address(f)</code> to <code>f.address</code> for <code>f</code> being of external function type.",
            "The function <code>push(value)</code> for dynamic storage arrays does not return the new length anymore (it returns nothing).Change <code>uint length = array.push(value)</code> to <code>array.push(value);</code>. The new length can be accessed via <code>array.length</code>.Change <code>array.length++</code> to <code>array.push()</code> to increase, and use <code>pop()</code> to decrease the length of a storage array.",
            "The unnamed function commonly referred to as \u201cfallback function\u201d was split up into a new\nfallback function that is defined using the <code>fallback</code> keyword and a receive ether function\ndefined using the <code>receive</code> keyword.Replace <code>function () external [payable] { ... }</code> by either <code>receive() external payable { ... }</code>,<code>fallback() external [payable] { ... }</code> or both. Prefer using a <code>receive</code> function only, whenever possible.",
            "If present, the receive ether function is called whenever the call data is empty (whether\nor not ether is received). This function is implicitly <code>payable</code>.",
            "The new fallback function is called when no other function matches (if the receive ether\nfunction does not exist then this includes calls with empty call data).\nYou can make this function <code>payable</code> or not. If it is not <code>payable</code> then transactions\nnot matching any other function which send value will revert. You should only need to\nimplement the new fallback function if you are following an upgrade or proxy pattern.",
            "The <a class=\"reference internal\" href=\"https://docs.soliditylang.org/en/v0.8.23/control-structures.html#try-catch\"><span class=\"std std-ref\">try/catch statement</span></a> allows you to react on failed external calls.",
            "<code class=\"docutils literal notranslate\"><span class=\"pre\">struct</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">enum</span></code> types can be declared at file level.",
            "Array slices can be used for calldata arrays, for example <code class=\"docutils literal notranslate\"><span class=\"pre\">abi.decode(msg.data[4:],</span> <span class=\"pre\">(uint,</span> <span class=\"pre\">uint))</span></code>\nis a low-level way to decode the function call payload."
]
