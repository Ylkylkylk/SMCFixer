[
            "In external function and contract creation calls, Ether and gas is now specified using a new syntax:\n<code>x.f{gas: 10000, value: 2 ether}(arg1, arg2)</code>.\nThe old syntax \u2013 <code>x.f.gas(10000).value(2 ether)(arg1, arg2)</code> \u2013 will cause an error.Change <code>x.f.value(...)()</code> to <code>x.f{value: ...}()</code>. Similarly <code>(new C).value(...)()</code> to <code>new C{value: ...}()</code> and <code>x.f.gas(...).value(...)()</code> to <code>x.f{gas: ..., value: ...}()</code>.",
            "The global variable <code>now</code> is deprecated, <code>block.timestamp</code> should be used instead.\nThe single identifier <code>now</code> is too generic for a global variable and could give the impression\nthat it changes during transaction processing, whereas <code>block.timestamp</code> correctly\nreflects the fact that it is just a property of the block.Change <code>now</code> to <code>block.timestamp</code>.",
            "NatSpec comments on variables are only allowed for public state variables and not\nfor local or internal variables.",
            "The token <code>gwei</code> is a keyword now (used to specify, e.g. <code>2 gwei</code> as a number)\nand cannot be used as an identifier.",
            "String literals now can only contain printable ASCII characters and this also includes a variety of\nescape sequences, such as hexadecimal (<code class=\"docutils literal notranslate\"><span class=\"pre\">\\xff</span></code>) and unicode escapes (<code class=\"docutils literal notranslate\"><span class=\"pre\">\\u20ac</span></code>).",
            "Unicode string literals are supported now to accommodate valid UTF-8 sequences. They are identified\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">unicode</span></code> prefix: <code class=\"docutils literal notranslate\"><span class=\"pre\">unicode\"Hello</span> <span class=\"pre\">ðŸ˜ƒ\"</span></code>.",
            "State Mutability: The state mutability of functions can now be restricted during inheritance:\nFunctions with default state mutability can be overridden by <code class=\"docutils literal notranslate\"><span class=\"pre\">pure</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> functions\nwhile <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> functions can be overridden by <code class=\"docutils literal notranslate\"><span class=\"pre\">pure</span></code> functions.\nAt the same time, public state variables are considered <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> and even <code class=\"docutils literal notranslate\"><span class=\"pre\">pure</span></code>\nif they are constants.",
            "Disallow <code>.</code> in user-defined function and variable names in inline assembly.\nIt is still valid if you use Solidity in Yul-only mode.",
            "Slot and offset of storage pointer variable <code>x</code> are accessed via <code>x.slot</code>\nand <code>x.offset</code> instead of <code>x_slot</code> and <code>x_offset</code>.Change <code>_slot</code> and <code>_offset</code> suffixes in inline assembly to <code>.slot</code> and <code>.offset</code>, respectively.",
            "If a struct or array contains a mapping, it can only be used in storage.\nPreviously, mapping members were silently skipped in memory, which\nis confusing and error-prone.",
            "Assignments to structs or arrays in storage does not work if they contain\nmappings.\nPreviously, mappings were silently skipped during the copy operation, which\nis misleading and error-prone.",
            "Visibility (<code class=\"docutils literal notranslate\"><span class=\"pre\">public</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">internal</span></code>) is not needed for constructors anymore:\nTo prevent a contract from being created, it can be marked <code class=\"docutils literal notranslate\"><span class=\"pre\">abstract</span></code>.\nThis makes the visibility concept for constructors obsolete.Remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">public</span></code> keyword from every constructor.Remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">internal</span></code> keyword from every constructor and add <code class=\"docutils literal notranslate\"><span class=\"pre\">abstract</span></code> to the contract (if not already present).",
            "Type Checker: Disallow <code class=\"docutils literal notranslate\"><span class=\"pre\">virtual</span></code> for library functions:\nSince libraries cannot be inherited from, library functions should not be virtual.",
            "Multiple events with the same name and parameter types in the same\ninheritance hierarchy are disallowed.",
            "<code>using A for B</code> only affects the contract it is mentioned in.\nPreviously, the effect was inherited. Now, you have to repeat the <code>using</code>\nstatement in all derived contracts that make use of the feature.Repeat the <code>using A for B</code> statements in all derived contracts if needed.",
            "Shifts by signed types are disallowed.\nPreviously, shifts by negative amounts were allowed, but reverted at runtime.",
            "The <code>finney</code> and <code>szabo</code> denominations are removed.\nThey are rarely used and do not make the actual amount readily visible. Instead, explicit\nvalues like <code>1e20</code> or the very common <code>gwei</code> can be used.",
            "The keyword <code class=\"docutils literal notranslate\"><span class=\"pre\">var</span></code> cannot be used anymore.\nPreviously, this keyword would parse but result in a type error and\na suggestion about which type to use. Now, it results in a parser error.",
            "NatSpec: Constructors and functions have consistent userdoc output."
]
